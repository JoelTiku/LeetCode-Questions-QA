// Approach 1: Brute Force
// Time complexity: O(n^2) and Space complexity: O(1)

// public class Solution {
//     public int maxProfit(int prices[]) {
//         int maxprofit = 0;
//         for (int i = 0; i < prices.length - 1; i++) {
//             for (int j = i + 1; j < prices.length; j++) {
//                 int profit = prices[j] - prices[i];
//                 if (profit > maxprofit)
//                     maxprofit = profit;
//             }
//         }
//         return maxprofit;
//     }
// }


// Approach 2: One Pass
// Time complexity: O(n) and Space complexity: O(1)

public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}