// Approach 1: Brute Force
// Time complexity: O(n^2) and Space complexity: O(1)O(1)

// public class Solution {
//     public int maxArea(int[] height) {
//         int maxarea = 0;
//         for (int left = 0; left < height.length; left++) {
//             for (int right = left + 1; right < height.length; right++) {
//                 int width = right - left;
//                 maxarea = Math.max(maxarea, Math.min(height[left], height[right]) * width);
//             }
//         }
//         return maxarea;
//     }
// }



// Approach 2: Two Pointer Approach
// Time complexity: O(n) and Space complexity: O(1)

public class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0;
        int left = 0; 
        int right = height.length - 1;
        while (left < right) {
            int width = right - left;
            maxarea = Math.max(maxarea, Math.min(height[left], height[right]) * width);
            if (height[left] <= height[right]) {
                left++;
            } else {
                right--;
            }
        }
        return maxarea;
    }
}