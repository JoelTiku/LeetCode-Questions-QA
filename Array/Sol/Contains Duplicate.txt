public class Solution{
    // Approach #1 (Naive Linear Search) [Time Limit Exceeded]
    // Time complexity: O(n^2) and Space complexity: O(1)

    // public boolean containsDuplicate(int[] nums) {
    //     for (int i = 0; i < nums.length; ++i) {
    //         for (int j = 0; j < i; ++j) {
    //             if (nums[j] == nums[i]) return true;  
    //         }
    //     }
    //     return false;
    // }




    // Approach #2 (Sorting) [Accepted]
    // Time complexity: O(nlogn) and Space complexity: O(1)

    // public boolean containsDuplicate(int[] nums) {
    //     Arrays.sort(nums);
    //     for (int i = 0; i < nums.length - 1; ++i) {
    //         if (nums[i] == nums[i + 1]) return true;
    //     }
    //     return false;
    // }




    // Approach #3 (Hash Table) [Accepted
    // Time complexity: O(n) and Space complexity: O(n)

    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>(nums.length);
        for (int x: nums) {
            if (set.contains(x)) return true;
            set.add(x);
        }
        return false;
    }
}